---
title: "Wage A/B Comparison"
date: last-modified
format:
  html:
    toc: true
    toc-depth: 2
---

# Overview
This page reports the wage bargaining experiment for Milestone M5. Both runs use `run_id = 0` over a 200-tick horizon with the Decider stub supplying deterministic responses. The artifacts below come from `python3 tools/generate_wage_ab.py`, which invokes `code/timing.py` to export the wage metrics and series used in the manuscript.

The stub currently preserves baseline behaviour for the OFF leg and applies identical guard-respecting responses for the ON leg, so values remain close but can diverge when guard clamps trigger. We keep the artifacts in place so later prompt work can replace the stub without altering page structure.

## Core metrics
Table @tbl-wage-ab summarises wage dispersion and vacancy fill rate for baseline (`OFF`) versus LLM-enabled (`ON`) runs. Values are rounded to two decimals to match the manuscript convention.

```{python}
#| label: tbl-wage-ab
#| tbl-cap: "Wage A/B metrics (run 0, 200 ticks)."
import pandas as pd
from pathlib import Path

source = Path("../data/wage/wage_ab_table.csv")
df = pd.read_csv(source)
ordered = (
    df.pivot(index="scenario", columns="metric", values="value")
      .reindex(["baseline", "llm_on"])
      [["wage_dispersion", "fill_rate"]]
      .rename(columns={
          "wage_dispersion": "Wage dispersion",
          "fill_rate": "Vacancy fill rate",
      })
)
formatted = ordered.applymap(lambda x: f"{x:,.2f}")
formatted
```

## Decision rationales
Table @tbl-wage-why tracks the wage why-codes observed in the A/B run. It is populated from `data/wage/wage_ab_why.csv` when live prompts are active and falls back to a stub note when no why-code data exists.

```{python}
#| label: tbl-wage-why
#| tbl-cap: "Wage why-code distribution (run 0, 200 ticks)."
import pandas as pd
from pathlib import Path
from IPython.display import Markdown, display

why_path = Path("../data/wage/wage_ab_why.csv")
why_table = None

if not why_path.exists():
    display(Markdown("""::: {.callout-note}
No wage why-code data captured for this run. Launch the live Decider (M6-LIVE) to populate `data/wage/wage_ab_why.csv`.
:::
"""))
else:
    raw = pd.read_csv(why_path)
    if raw.empty or raw.get("count", pd.Series([0])).sum() <= 0:
        display(Markdown("""::: {.callout-note}
Wage why-code counts are zero, indicating the deterministic stub path. Run live prompts to populate the table.
:::
"""))
    else:
        table = raw.copy()
        if "scenario" not in table.columns or "why_code" not in table.columns:
            display(Markdown("""::: {.callout-warning}
Unexpected schema in `data/wage/wage_ab_why.csv`; expected `scenario`, `why_code`, `count`, and optional `share` columns.
:::
"""))
        else:
            table["scenario"] = table["scenario"].astype(str)
            table["why_code"] = table["why_code"].astype(str)
            if "count" in table.columns:
                table["count"] = pd.to_numeric(table["count"], errors="coerce").fillna(0).astype(int)
            else:
                table["count"] = 0
            if "share" in table.columns:
                table["share"] = pd.to_numeric(table["share"], errors="coerce")
            else:
                totals = table.groupby("scenario")["count"].transform(lambda s: s.sum() if s.sum() > 0 else 0)
                table["share"] = table["count"].where(totals > 0, other=0) / totals.replace({0: pd.NA})
            table["share"] = table["share"].fillna(0)
            scenario_labels = {
                "baseline": "Baseline (OFF)",
                "llm_on": "LLM ON",
            }
            table["Scenario"] = table["scenario"].map(scenario_labels).fillna(table["scenario"].str.title())
            table["Why code"] = table["why_code"]
            table["Decisions"] = table["count"]
            table["Share"] = table["share"].map(lambda x: f"{x * 100:.1f}%")
            cols = ["Scenario", "Why code", "Decisions", "Share"]
            table = table[cols].sort_values(["Scenario", "Decisions"], ascending=[True, False])
            why_table = table.reset_index(drop=True)

if why_table is not None:
    why_table
```

## Wage-dispersion overlay
Figure @fig-wage-ab overlays the OFF and ON wage-dispersion series. The OFF path is dashed, the ON path is solid, and the final 50 ticks are shaded to highlight the comparison window used elsewhere in the manuscript.

![Wage dispersion overlay (OFF dashed, ON solid; final 50 ticks shaded)](../figs/wage/wage_ab_overlay.png){#fig-wage-ab}

## Notes
- Artifact paths: `data/wage/wage_ab_table.csv`, `figs/wage/wage_ab_overlay.png`.
- Stub behaviour keeps OFF/ON decisions largely aligned; expect richer divergences once live prompts replace the stub.
